

import  { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import AdminNavbar from "../shared/AdminNavbar"
import Footer from "../shared/footer"


const CompaniesCreation = ({ addCompany }) => {

    const [formData, setFormData] = useState({

        name: "",
        description: "",
        logo: "",
        phone: "",
        email: "",
        street: "",
        city: "",
        state: "",
        zip: "",
        country: "",
    });

  const navigate = useNavigate();

    const handleChange = (e) => {
        setFormData((prev) => ({
                ...prev,
                [e.target.name]: e.target.value,
            }
        ));
    };

  const handleSubmit = (e) => {

        e.preventDefault();

        const {
            name,
            description,
            logo,
            phone,
            email,
            street,
            city,
            state,
            zip,
            country,
        } = formData;

        if (!name || !description) {
            return alert("Name and Description are required.");
        }

        const newCompany = {
            name,
            description,
            logo,
            contactDetails: {
                phone,
                email,
                address: {
                    street,
                    city,
                    state,
                    zip,
                    country, 
                },
            },
            
            createdAt: new Date(),
            // ownerId will be handled from backend auth
        };

        addCompany(newCompany);
        navigate("/");
    };
 
  return (


        <>
            <AdminNavbar />
            
            <div className="mx-10">
                <div className="relative p-10 mx-auto my-10 border rounded-lg shadow-2xl border-orange-500/30 max-w-4xl bg-black/20 backdrop-blur-sm">

                    <div
                        className="absolute inset-0 rounded-lg opacity-30 blur-xl"
                        style={{
                            background: `radial-gradient(circle at 50% 50%, rgba(16, 185, 129, 0.3), transparent 80%)`,
                        }}
                    />

                    

                    <div className="relative z-10 text-white">
                        
                        <h1 className="text-3xl font-bold text-center text-green-500 mb-6">
                            Create New Company
                        </h1>

                        <div className="flex justify-end">
                            <Link to="/admin-companies" className="flex items-center px-4 py-2 bg-blue-500 rounded-lg shadow-md hover:bg-blue-600 focus:outline-none transition duration-200 ease-in-out">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                                </svg>
                                <span className="text-white font-semibold  text-lg">Back</span>
                            </Link>
                        </div>

                        <form onSubmit={handleSubmit} className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                            <label className="block mb-1">Company Name *</label>
                            <input
                                type="text"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                placeholder="Enter company name"
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                                required
                            />
                            </div>

                            <div>
                            <label className="block mb-1">Logo </label>
                            <input
                                type="file"
                                name="logo"
                                accept=".png, .jpg, .jpeg"
                                onChange={(e) => setFormData((prev) => ({ ...prev, logo: URL.createObjectURL(e.target.files[0]) }))}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            {formData.logo && (
                                <img
                                src={formData.logo}
                                alt="preview"
                                className="mt-2 w-16 h-16 rounded-full object-cover"
                                />
                            )}
                            </div>

                            <div className="md:col-span-2">
                            <label className="block mb-1">Description *</label>
                            <textarea
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                placeholder="Enter description (max 1000 characters)"
                                maxLength={1000}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20 h-28"
                                required
                            />
                            </div>

                            <div>
                            <label className="block mb-1">Phone</label>
                            <input
                                type="text"
                                name="phone"
                                value={formData.phone}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div>
                            <label className="block mb-1">Email</label>
                            <input
                                type="email"
                                name="email"
                                value={formData.email}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div>
                            <label className="block mb-1">Street</label>
                            <input
                                type="text"
                                name="street"
                                value={formData.street}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div>
                            <label className="block mb-1">City</label>
                            <input
                                type="text"
                                name="city"
                                value={formData.city}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div>
                            <label className="block mb-1">State</label>
                            <input
                                type="text"
                                name="state"
                                value={formData.state}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div>
                            <label className="block mb-1">ZIP</label>
                            <input
                                type="text"
                                name="zip"
                                value={formData.zip}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <div className="md:col-span-2">
                            <label className="block mb-1">Country</label>
                            <input
                                type="text"
                                name="country"
                                value={formData.country}
                                onChange={handleChange}
                                className="w-full px-4 py-2 rounded bg-black/50 text-white border border-white/20"
                            />
                            </div>

                            <button
                                type="submit"
                                className="md:col-span-2 bg-green-600 hover:bg-green-700 py-2 px-6 rounded text-white font-semibold shadow mt-4 mx-auto w-4/5"
                            >
                            Create Company
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <Footer />
        </>
    );
};

export default CompaniesCreation;



----------------------------------------------


import { useState, useRef } from "react";
import {
  Table,
  Header,
  HeaderRow,
  HeaderCell,
  Body,
  Row,
  Cell,
} from "@table-library/react-table-library/table";
import { usePagination } from "@table-library/react-table-library/pagination";
import { useTheme } from "@table-library/react-table-library/theme";
import { getTheme } from "@table-library/react-table-library/baseline";
import { useSort } from "@table-library/react-table-library/sort";

import html2canvas from "html2canvas";
import { jsPDF } from "jspdf";
import axios from "axios";

// Sample static company data


const CompanyTable = () => {
    
  const [search, setSearch] = useState("");
  const printRef = useRef();

  const companies = async() => {

    try{
        const res = await axios.get("http://localhost:5000/api/company/");
        const data = res.data.companies.map((company) => ({ ...company }));
        data.forEach((company) => {
            company.createdAt = new Date(company.createdAt); // Convert to Date object
        });
        console.log(data);
        return data;

    }catch(error){
        console.log(error);
    }

}

  // Filtering first
  const filteredCompanies = companies.filter((company) =>
    company.name.toLowerCase().includes(search.toLowerCase())
  );

  const data = { nodes: filteredCompanies };

  // Sorting logic
  const sort = useSort(
    data,
    {
      state: { sortKey: "CREATED_AT", reverse: false },
      onChange: (action, state) => console.log("Sort changed:", state),
    },
    {
      sortFns: {
        NAME: (array) => array.sort((a, b) => a.name.localeCompare(b.name)),
        CREATED_AT: (array) => array.sort((a, b) => b.createdAt - a.createdAt),
      },
    }
  );

  // Pagination
  const pagination = usePagination(data, {
    state: { page: 0, size: 5 },
  });

  // Apply sorting
  const sortedData = sort.state.sortKey
    ? [...filteredCompanies].sort(
        sort.state.sortKey === "NAME"
          ? (a, b) =>
              sort.state.reverse
                ? b.name.localeCompare(a.name)
                : a.name.localeCompare(b.name)
          : (a, b) =>
              sort.state.reverse
                ? a.createdAt - b.createdAt
                : b.createdAt - a.createdAt
      )
    : filteredCompanies;

  // Paginate sorted data
  const paginatedData = sortedData.slice(
    pagination.state.page * pagination.state.size,
    (pagination.state.page + 1) * pagination.state.size
  );

  const theme = useTheme([
    getTheme(),
    {
      Table: `
        --data-table-library_grid-template-columns: 100px 1fr 1fr 80px;
        border-collapse: collapse;
        background-color: transparent;
      `,
      BaseCell: `
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px;
        color: white;
        background-color: rgba(0, 0, 0, 0.2);
      `,
      HeaderCell: `
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px;
        color: orange;
        background-color: rgba(0, 0, 0, 0.2);
        text-align: center;
      `,
      
      
    },
  ]);

  const handleDownloadPdf = async () => {
    const element = printRef.current;
    const canvas = await html2canvas(element);
    const data = canvas.toDataURL("image/png");

    const pdf = new jsPDF();
    const imgProps = pdf.getImageProperties(data);
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

    pdf.addImage(data, "PNG", 0, 0, pdfWidth, pdfHeight);
    pdf.save("companies.pdf");
  };

  return (
    <div className="mx-10">
      <div className="relative p-10 mx-auto my-10 border rounded-lg shadow-2xl border-orange-500/30 max-w-5xl bg-black/20 backdrop-blur-sm overflow-auto">
        <div
          className="absolute inset-0 rounded-lg opacity-30 blur-xl"
          style={{
            background: `radial-gradient(circle at 50% 50%, rgba(16, 185, 129, 0.3), transparent 80%)`,
          }}
        />
        <div className="relative z-10 text-white">
          <h1 className="text-3xl font-bold text-center text-green-500">
            My Companies
          </h1>
          <p className="mt-2 text-lg text-start mb-4">Manage your companies here.</p>

          <div className="flex items-center justify-between mb-4">
            <input
              type="text"
              placeholder="Search by name..."
              className="px-4 py-2 rounded bg-black/50 text-white border border-white/20 w-1/2"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
            <button
              onClick={handleDownloadPdf}
              className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow"
            >
              Download as PDF
            </button>
          </div>

          <div ref={printRef}>
            <div className="flex items-center justify-between mb-2">
              <div className="flex gap-2">
                <button
                  className="px-3 py-1 bg-white/10 border border-white/20 text-emerald-600 text-sm rounded hover:bg-white/20"
                  onClick={() => sort.fns.onSortChange("NAME")}
                >
                  Sort: Name (A-Z)
                </button>
                <button
                  className="px-3 py-1 bg-white/10 border border-white/20 text-emerald-600 text-sm rounded hover:bg-white/20"
                  onClick={() => sort.fns.onSortChange("CREATED_AT")}
                >
                  Sort: Date (Newest)
                </button>
              </div>

              <div>
                <label className="text-white text-sm mr-2">Rows per page:</label>
                <select
                  className="bg-black/50 border border-white/20 text-white text-sm rounded px-2 py-1"
                  value={pagination.state.size}
                  onChange={(e) => pagination.fns.onSetSize(Number(e.target.value))}
                >
                  {[2, 5, 10, 20].map((size) => (
                    <option key={size} value={size}>
                      {size}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <Table data={{ nodes: paginatedData }} theme={theme}>
              {(tableList) => (
                <>
                  <Header>
                    <HeaderRow theme={theme}>
                      <HeaderCell> Logo</HeaderCell>
                      <HeaderCell> Company Name</HeaderCell>
                      <HeaderCell> Created At</HeaderCell>
                      <HeaderCell> Action</HeaderCell>
                    </HeaderRow>
                  </Header>

                  <Body>
                    {tableList.map((item, index) => (
                      <Row key={`${item.id}-${index}`} item={item}>
                        <Cell>
                          <img
                            src={item.logo}
                            alt={item.name}
                            className="w-10 h-10 rounded-full"
                          />
                        </Cell>
                        <Cell>{item.name}</Cell>
                        <Cell>
                          {item.createdAt.toLocaleDateString("en-IN", {
                            year: "numeric",
                            month: "short",
                            day: "numeric",
                          })}
                        </Cell>
                        <Cell>
                          <button className="text-green-400 hover:underline">
                            Edit
                          </button>
                        </Cell>
                      </Row>
                    ))}
                  </Body>
                </>
              )}
            </Table>
          </div>

          <div className="flex justify-between items-center mt-4 text-sm text-white/80">
            <div>
              Page {pagination.state.page + 1} of{" "}
              {Math.ceil(sortedData.length / pagination.state.size)}
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => pagination.fns.onSetPage(pagination.state.page - 1)}
                disabled={pagination.state.page === 0}
                className="px-2 py-1 bg-white/10 border border-white/20 rounded text-white hover:bg-white/10 active:bg-white/30 disabled:opacity-30"
              >
                ← Prev
              </button>
              <button
                onClick={() => pagination.fns.onSetPage(pagination.state.page + 1)}
                disabled={
                  pagination.state.page + 1 >=
                  Math.ceil(sortedData.length / pagination.state.size)
                }
                className="px-2 py-1 bg-white/10 border border-white/20 rounded text-white hover:bg-white/10 active:bg-white/30 disabled:opacity-30"
              >
                Next →
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CompanyTable;



----

import { useState, useRef } from "react";
import {
  Table,
  Header,
  HeaderRow,
  HeaderCell,
  Body,
  Row,
  Cell,
} from "@table-library/react-table-library/table";
import { usePagination } from "@table-library/react-table-library/pagination";
import { useTheme } from "@table-library/react-table-library/theme";
import { getTheme } from "@table-library/react-table-library/baseline";
import { useSort } from "@table-library/react-table-library/sort";

import html2canvas from "html2canvas";
import { jsPDF } from "jspdf";
import {  useSelector } from "react-redux";
// import useGetAllCompanies from "@/hooks/useGetAllCompanies";

import useGetCompanyById from "@/hooks/useGetSIngleComapany";
import { useParams } from "react-router-dom";

// Sample static company data


const CompanyTable = () => {
    // useGetAllCompanies();
  const [search, setSearch] = useState("");
  const printRef = useRef();


//   const params = useParams();
//   useGetCompanyById(params.id);
  
//   const { singleCompany} = useSelector((state) => state.company);
//   console.log("companies", singleCompany);
    const { companies } = useSelector(store => store.company );




//   console.log("companies", companies);


  // Filtering first
  const filteredCompanies = companies.filter((company) =>
    company.name.toLowerCase().includes(search.toLowerCase())
  );

  const data = { nodes: filteredCompanies };

  // Sorting logic
  const sort = useSort(
    data,
    {
      state: { sortKey: "NAME", reverse: false },
      
      onChange: (action, state) => console.log("Sort changed:", state),
    },
    {
      sortFns: {
        NAME: (array) => array.sort((a, b) => a.name.localeCompare(b.name)),
        CREATED_AT: (array) => array.sort((a, b) => b.createdAt - a.createdAt),
      },
    }
  );

  // Pagination
  const pagination = usePagination(data, {
    state: { page: 0, size: 5 },
  });

  // Apply sorting
  const sortedData = [...filteredCompanies].sort((a, b) => {
    if (!sort.state.sortKey) return 0;

    if (sort.state.sortKey === "NAME") {
      return sort.state.reverse
        ? b.name.localeCompare(a.name)
        : a.name.localeCompare(b.name);
    }

    if (sort.state.sortKey === "CREATED_AT") {
      return sort.state.reverse
        ? a.createdAt - b.createdAt
        : b.createdAt - a.createdAt;
    }

    return 0;
  });

  // Paginate sorted data
  const paginatedData = sortedData.slice(
    pagination.state.page * pagination.state.size,
    (pagination.state.page + 1) * pagination.state.size
  );

  const theme = useTheme([
    getTheme(),
    {
      Table: `
        --data-table-library_grid-template-columns: 100px 1fr 1fr 80px;
        border-collapse: collapse;
        background-color: transparent;
      `,
      BaseCell: `
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px;
        color: white;
        background-color: rgba(0, 0, 0, 0.2);
      `,
      HeaderCell: `
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 8px;
        color: orange;
        background-color: rgba(0, 0, 0, 0.2);
        text-align: center;
      `,

      
      
      
    },
  ]);

  const handleDownloadPdf = async () => {
    const element = printRef.current;
    const canvas = await html2canvas(element, { backgroundColor: '#000' });
    const data = canvas.toDataURL("image/png");

    const pdf = new jsPDF();
    const imgProps = pdf.getImageProperties(data);
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

    pdf.addImage(data, "PNG", 0, 0, pdfWidth, pdfHeight);
    pdf.setTextColor(0, 0, 0);
    pdf.save("companies.pdf");
  };

  return (
        <div className="mx-10">
        <div className="relative p-10 mx-auto my-10 border rounded-lg shadow-2xl border-orange-500/30 max-w-5xl bg-black/20 backdrop-blur-sm overflow-auto">
            <div
                className="absolute inset-0 rounded-lg opacity-30 blur-xl"
                style={{
                    background: `radial-gradient(circle at 50% 50%, rgba(16, 185, 129, 0.3), transparent 80%)`,
                }}
            />

            <div className="relative z-10 text-white">
            <h1 className="text-3xl font-bold text-center text-green-500">
                My Companies
            </h1>
            <p className="mt-2 text-lg text-start mb-4">Manage your companies here...</p>

            <div className="flex items-center justify-between mb-4">
                <input
                type="text"
                placeholder="Search by name..."
                className="px-4 py-2 rounded bg-black/50 text-white border border-white/20 w-1/2"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                />
                <button
                onClick={handleDownloadPdf}
                className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow"
                >
                Download as PDF
                </button>
            </div>

            <div ref={printRef}>
                <div className="flex items-center justify-between mb-2">
                <div className="flex gap-2">
                    <button
                    className="px-3 py-1 bg-white/10 border border-white/20 text-emerald-600 text-sm rounded hover:bg-white/20"
                    onClick={() => sort.fns.onSortChange("NAME")}
                    >
                    Sort: Name (A-Z)
                    </button>
                    <button
                    className="px-3 py-1 bg-white/10 border border-white/20 text-emerald-600 text-sm rounded hover:bg-white/20"
                    onClick={() => sort.fns.onSortChange("CREATED_AT")}
                    >
                    Sort: Date (Newest)
                    </button>
                </div>

                <div>
                    <label className="text-white text-sm mr-2">Rows per page:</label>
                    <select
                    className="bg-black/50 border border-white/20 text-white text-sm rounded px-2 py-1"
                    value={pagination.state.size}
                    onChange={(e) => pagination.fns.onSetSize(Number(e.target.value))}
                    >
                    {[2, 5, 10, 20].map((size) => (
                        <option key={size} value={size}>
                        {size}
                        </option>
                    ))}
                    </select>
                </div>
                </div>

                <Table data={{ nodes: paginatedData }} theme={theme}>
                    {
                        (tableList) => (
                            <>
                            <Header>
                                <HeaderRow theme={theme}>
                                <HeaderCell> Logo</HeaderCell>
                                <HeaderCell> Company Name</HeaderCell>
                                <HeaderCell> Created At</HeaderCell>
                                <HeaderCell> Action</HeaderCell>
                                </HeaderRow>
                            </Header>

                            <Body>

                                {
                                    tableList.map((companies, index) => (
                                        <Row key={`${companies.id}-${index}`} item={companies}>
                                            <Cell >
                                                {
                                                    companies.images && companies.images.length > 0 ? (
                                                    <img
                                                        src={companies.images[0]}
                                                        alt={companies.name}
                                                        className="w-10 h-10 rounded-full object-cover flex items-center justify-center"
                                                    />
                                                    ) : (
                                                    <div className="w-10 h-10 bg-gray-600 rounded-full flex items-center justify-center text-center">
                                                        <span className="text-white text-xs">
                                                            {
                                                                companies.name ? companies.name.charAt(0).toUpperCase() : "N/A"
                                                            }
                                                        </span>
                                                    </div>
                                                    )
                                                }
                                            </Cell>

                                            <Cell>{companies.name}</Cell>

                                            <Cell>
                                            {
                                                new Date(companies.createdAt).toLocaleDateString("en-IN", {
                                                    year: "numeric",
                                                    month: "short",
                                                    day: "numeric",
                                                })
                                            } 
                                            </Cell> 

                                            <Cell>
                                                <button className="text-green-400 hover:underline">
                                                    Edit
                                                </button>
                                            </Cell>
                                        </Row>
                                    ))
                                }
                            </Body>
                            </>
                        )
                    }
                </Table>
            </div>

            <div className="flex justify-between items-center mt-4 text-sm text-white/80">
                <div>
                Page {pagination.state.page + 1} of{" "}
                {Math.ceil(sortedData.length / pagination.state.size)}
                </div>
                <div className="flex gap-2">
                <button
                    onClick={() => pagination.fns.onSetPage(pagination.state.page - 1)}
                    disabled={pagination.state.page === 0}
                    className="px-2 py-1 bg-white/10 border border-white/20 rounded text-white hover:bg-white/10 active:bg-white/30 disabled:opacity-30"
                >
                    ← Prev
                </button>
                <button
                    onClick={() => pagination.fns.onSetPage(pagination.state.page + 1)}
                    disabled={
                    pagination.state.page + 1 >=
                    Math.ceil(sortedData.length / pagination.state.size)
                    }
                    className="px-2 py-1 bg-white/10 border border-white/20 rounded text-white hover:bg-white/10 active:bg-white/30 disabled:opacity-30"
                >
                    Next →
                </button>
                </div>
            </div>
            </div>
        </div>
        </div>
    );
};

export default CompanyTable;
