



//  const [showShareModal, setShowShareModal] = useState(false);

    // const handleAddToWishList = async () => {

    //     try {

    //         const response = await axios.post('http://localhost:8000/api/v1/add', {
    //             productId,
    //             withCredentials: true
    //         });

    //         console.log("Response Data:", response.data);

    //         if(response.data.success) {
    //             dispatch(addToWishList(response.data.product));
    //             setIsFavorite(true);
    //             toast.success("Product added to wishlist successfully!✔️✔️", {
    //                 style: {
    //                     color: '#10B981',
    //                     backgroundColor: '#09090B',
    //                     fontSize: '20px',
    //                     borderColor: '#10B981',
    //                     padding: '10px 20px'
    //                 }
    //             });
    //         }


    //     }catch (error) {
    //             console.error('Failed to add to wishlist:', error);
    //             toast.error("Failed to add to wishlist!", {
    //                 style: {
    //                     color: '#10B981',
    //                     backgroundColor: '#09090B',
    //                     fontSize: '20px',
    //                     borderColor: '#10B981',
    //                     padding: '10px 20px'
    //                 }
    //             });
    //         }
    //     };

    
    //* for remove the card from wishlist
    // const handleRemoveFromWishList = async (productId) => {
    //     try {

    //         const response = await axios.delete('http://localhost:8000/api/v1/remove', {
    //             data: { productId },
    //             withCredentials: true
    //         });
        
    //         if(response.data.success) {
    //             dispatch(removeFromWishList(productId));
    //             setIsFavorite(false);
    //             toast.success("Removed from wishlist!");
    //         }

    //     } catch (error) {
    //         console.error('Failed to remove from wishlist:', error);
    //         toast.error("Failed to remove from wishlist!", {
    //             style: {
    //                 color: '#10B981',
    //                 backgroundColor: '#09090B',
    //                 fontSize: '20px',
    //                 borderColor: '#10B981',
    //                 padding: '10px 20px'
    //             }
    //         });
    //     }
    // };   
   

       //   <div className="min-h-screen py-12 bg-[#09090B]">
    //     <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

    //       <div className="flex justify-between items-center mb-8">
    //         <h1 className="text-3xl font-bold text-emerald-500">Your Wishlist</h1>
    //         <Button 
    //           onClick={handleClearWishlist}
    //           variant="destructive"
    //           className="hover:bg-rose-600"
    //         >
    //           Clear Wishlist
    //         </Button>
    //       </div>
          
          
    //         <div>
    //             Your wishlist is empty. Start adding some bikes!
    //         </div>
        
    //     </div>










 ⁡⁢⁣⁣CompanyCard.jsx⁡
    import { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';
import { useState } from 'react';
import { ImageSlider } from './ImageSlider';
import PropTypes from 'prop-types';
import { Link, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';

export function CompanyCard({ id: companyId, name, images, price }) {
    
    // console.log("CompanyCard", {
    //     companyId,
    //     productId,
    //     name,
    //     images,
    //     price,
    // });

    // const { allProducts } = useSelector(state => state.product);
    // console.log("CompanyCard allProducts : " , allProducts);
    // allProducts.forEach(product => {
    //     console.log("hello" , `${product._id}, ${product.title}, ${product.description}`);
    // });

    

    const [isHovered, setIsHovered] = useState(false);
    const navigate = useNavigate();

    // Motion values for 3D rotation
    const x = useMotionValue(0);
    const y = useMotionValue(0);

    // Smooth spring animation for rotation
    const rotateX = useSpring(useTransform(y, [-100, 100], [30, -30]), {
        stiffness: 100,
        damping: 30
    });
    
    const rotateY = useSpring(useTransform(x, [-100, 100], [-30, 30]), {
        stiffness: 100,
        damping: 30
    });

    function handleMouseMove(event) {
        const rect = event.currentTarget.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;

        x.set(event.clientX - centerX);
        y.set(event.clientY - centerY);
    }

    function handleMouseLeave() {
        setIsHovered(false);
        x.set(0);
        y.set(0);
    }

  return (
        <motion.div
            className="relative w-[290px]"
            onMouseMove={handleMouseMove}
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={handleMouseLeave}
            style={{
                perspective: 1000,
            }}
        >
            <motion.div
                className="w-full rounded-lg bg-card border-2 border-zinc-800 overflow-hidden"
                style={{
                    rotateX: rotateX,
                    rotateY: rotateY,
                    transformStyle: "preserve-3d",
                }}
            >
                {/* macOS window controls */}
                <div className="tools p-3 border-b border-orange-500 mb-1">
                    <div className="flex gap-2">
                        <div className="circle">
                        <span className="box bg-[#ff605c] block w-3 h-3 rounded-full"></span>
                        </div>

                        <div className="circle">
                        <span className="box bg-[#ffbd44] block w-3 h-3 rounded-full"></span>
                        </div>

                        <div className="circle">
                        <span className="box bg-[#00ca4e] block w-3 h-3 rounded-full"></span>
                        </div>
                    </div>
                </div>

                {/* Image Slider */}
                <Link to={`/description/${companyId}`}>
                    <ImageSlider images={images} className="h-40" />
                </Link>

                {/* Card content */}
                <div className="p-6 space-y-4">
                    <h2 className="text-xl font-semibold text-foreground text-center">{name}</h2>
                    <p className="text-2xl font-bold text-center text-emerald-500">
                        {price.toLocaleString()} Rs
                    </p>

                    {/* Animated View Button */}
                    <motion.button
                        className="w-full py-2 px-4 bg-emerald-500 text-white rounded-md font-lg"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        transition={{
                            type: "spring",
                            stiffness: 500,
                            damping: 30,
                        }}
                        onClick={() => navigate(`/description/${companyId}`)}
                    >
                        View Details
                    </motion.button>
                </div>

                {/* Hover overlay */}
                <motion.div
                    className="absolute inset-0 bg-primary/5 rounded-lg pointer-events-none"
                    style={{
                        opacity: useTransform(
                        rotateX,
                        [-30, 0, 30],
                        [0.2, 0, 0.2]
                        ),
                        transformStyle: "preserve-3d",
                    }}
                />
            </motion.div>
        </motion.div>
    );
}

CompanyCard.propTypes = {
  id: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  price: PropTypes.number.isRequired,------------------------------------
  images: PropTypes.arrayOf(PropTypes.string).isRequired,
};

--------------------------------------------------------------------------------

⁡⁢⁣⁡⁢⁣⁣bike-Details.jsx⁡


import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom'; // Ensure useParams is imported from react-router-dom
import { motion } from 'framer-motion';
import { sampleCompanies } from '../../../JavaScript/bike';
import { ImageSlider } from './ImageSlider';
import { 
  Phone, 
  MapPin, 
  MessageSquare, 
  Timer, 
  Power, 
  CheckCircle2,
  Share2,
  Heart,
  Gauge,
} from 'lucide-react';
import Navbar from '@/components/shared/Navbar';
import { toast } from 'sonner';
import Like from '../../user/my-ui/Like';
import Ratting from '../../user/my-ui/Ratting';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import { clearSingleProduct, setLoading, setSingleProduct } from '@/store/productSlice';
import { Product_API_END_POINT } from '@/utils/api';
import { EventAvailable, Policy } from '@mui/icons-material';
import { addToWishList, removeFromWishList } from '@/store/wishListSlice';

export default function BikeDetails() {
  
  const dispatch = useDispatch();
  const params = useParams();
  const productId = params.id;
//   console.log("Product ID:", productId);

  const { singleProduct , loading } = useSelector(state => state.product);
//   const { wishList } = useSelector(state => state.wishlist);
//   console.log("Wishlist:", wishList);
  



  useEffect(() => {

		const fetchSingleBike = async () => {

			try {

                dispatch(setLoading(true));
				dispatch(clearSingleProduct());

				const response = await axios.get(`http://localhost:8000/api/v1/product/${productId}`, {
					withCredentials: true
				});

				// console.log("Response Data:", response.data);

				if(response.data.success) {
					dispatch(setSingleProduct(response.data.product));
				}

			}catch (error) {
				console.error('Failed to fetch bike details:', error);
				toast.error("Failed to fetch bike details!", {
					style: {
						color: '#10B981',
						backgroundColor: '#09090B',
						fontSize: '20px',
						borderColor: '#10B981',
						padding: '10px 20px'
					}
				});
			} finally {
                 dispatch(setLoading(false));
            }
		};

		fetchSingleBike();

    }, [productId, dispatch]);

//   console.log("Single Product:", singleProduct);
//   console.log("Single Product title :", singleProduct?.title);

//   console.log("Single info ID:", singleProduct?.specifications[0]?.EngineType);


  


  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: ''
  });




const { wishList } = useSelector(state => state.wishlist);
const [isFavorite, setIsFavorite] = useState(false);

useEffect(() => {
    if (singleProduct) {
        const exists = wishList.some(item => item._id === singleProduct._id);
        setIsFavorite(exists);
    }
}, [wishList, singleProduct]);

const handleWishlist = async () => {
    if (!singleProduct) {
        toast.error("Product information not available", {
            style: {
                color: '#ef4444',
                backgroundColor: '#09090B',
                fontSize: '20px',
                borderColor: '#ef4444',
                padding: '10px 20px'
            }
        });
        return;
    }

    try {
        if (isFavorite) {
            const res = await axios.delete(`http://localhost:8000/api/v1/wishlist/remove/${singleProduct._id}`, {
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (res.data.success) {
                dispatch(removeFromWishList(singleProduct._id));
                toast.success("Removed from wishlist!", {
                    style: {
                        color: '#10B981',
                        backgroundColor: '#09090B',
                        fontSize: '20px',
                        borderColor: '#10B981',
                        padding: '10px 20px'
                    }
                });
                setIsFavorite(false);
            }
        } else {
            const res = await axios.post('http://localhost:8000/api/v1/wishlist/add', {
                productId: singleProduct._id
            }, {
                withCredentials: true,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (res.data.success) {
                const productData = {
                    _id: singleProduct._id,
                    title: singleProduct.title,
                    price: singleProduct.price,
                    images: singleProduct.images
                };

                dispatch(addToWishList(productData));
                toast.success("Added to wishlist!", {
                    style: {
                        color: '#10B981',
                        backgroundColor: '#09090B',
                        fontSize: '20px',
                        borderColor: '#10B981',
                        padding: '10px 20px'
                    }
                });
                setIsFavorite(true);
            }
        }
    } catch (error) {
        console.error('Wishlist operation failed:', error);
        const errorMessage = error.response?.data?.message || `Failed to ${isFavorite ? 'remove from' : 'add to'} wishlist!`;
        toast.error(errorMessage, {
            style: {
                color: '#ef4444',
                backgroundColor: '#09090B',
                fontSize: '20px',
                borderColor: '#ef4444',
                padding: '10px 20px'
            }
        });
    }
};



const [likes, setLikes] = useState(0);
  const [dislikes, setDislikes] = useState(0);


    const handleShare = async () => {

		const url = window.location.href;

		try {
			await navigator.clipboard.writeText(url);
			toast.success("Link Copied!✔️✔️", {
				duration: 2000,
				style: {
					color: '#10B981',
					backgroundColor: '#09090B',          
					fontSize: '20px',
					borderColor: '#10B981',
					padding: '10px 20px'
				}
			});
		} catch (err) {
			console.error('Failed to copy:', err);
			toast("Failed to copy link");
		}
    };


  const handleSubmit = (e) => {
    e.preventDefault();
    toast.success("FormSubmission Successfully!❤️❤️ ", {
      style: {
        color: '#10B981',
        backgroundColor: '#09090B',          
        fontSize: '20px',
        borderColor: '#10B981',
        padding: '10px 20px'
      }
    });
    setShowForm(false);
  };

  const handleRating = (rating) => {
    setUserRating(rating);
    toast.success(`Thank you for rating ${rating} stars!`, {
      style: {
        color: '#10B981',
        backgroundColor: '#09090B',
        fontSize: '20px',
        borderColor: '#10B981',
        padding: '10px 20px'
      }
    });
  };

  const handleLikeDislike = (type) => { 
    if (type === 'like' && dislikes === 0) {
      setDislikes(prev => prev - 1);
    } else if (type === 'dislike' && likes === 0) {
      setLikes(prev => prev - 1);
    } else {
      if (type === 'like') {
        setLikes(prev => prev + 1);
      } else {
        setDislikes(prev => prev + 1);
      }
    }
  };

  const op = [
    'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg',
  'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg',
  'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg',
    'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg',
  'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg',
    'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg',
        'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg',
]


  return (

        <>  

            <Navbar />
            
            <div className="min-h-screen py-12 bg-[#09090B]">
                
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <h1 className="text-4xl font-bold text-[#246FAC] mb-10 text-start" style={{ textDecoration: "underline solid #FFB903 0.1em" }}>Bike Details Page :-</h1>
                <div className="bg-black/20 backdrop-blur-sm border border-emerald-500/30 rounded-lg shadow-2xl p-6 md:p-8">
                    {/* Main Info Section */}

                    <div className="grid md:grid-cols-2 gap-8">
                    {/* Left Column - Images */}

                    <div className="h-[730px] rounded-lg overflow-hidden">
                        {/* <ImageSlider images={singleProduct?.images || []} interval={5000} className="h-full" /> */}
                        <ImageSlider images={op} interval={5000} className="h-full" />

                    </div>

                    {/* Right Column - Basic Info */}
                    <div className="space-y-6">
                        <div className="flex justify-center items-start">
                            <h1 className="text-4xl font-bold text-white">{singleProduct?.title}</h1> 
                        </div>

                        <div className="flex justify-between items-start">
                            <h5 className="text-3xl font-bold text-emerald-500">
                                Rs {singleProduct?.price?.toLocaleString()}
                            </h5>

                            <div className="flex gap-2 items-center">
                                <motion.button
                                onClick={handleShare}
                                className="flex items-center gap-2 px-4 py-2 rounded-lg bg-emerald-500/10 hover:bg-emerald-500/20 transition-colors border border-emerald-500/30"
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                                >
                                <Share2 className="h-5 w-5 text-emerald-500" />
                                <span className="text-emerald-500 font-medium">Share</span>
                                </motion.button>
                                
                                <motion.button
                                    onClick={handleWishlist}
                                    className="flex items-center gap-2 px-4 py-2 rounded-lg bg-rose-500/10 hover:bg-rose-500/20 transition-colors border border-rose-500/30"
                                >
                                    <Heart 
                                        className={`h-5 w-5 ${isFavorite ? 'text-rose-500 fill-rose-500' : 'text-rose-500'}`}
                                    />

                                    <span className="text-rose-500 font-medium">
                                        {isFavorite ? 'Remove from Wishlist' : 'Add to Wishlist'}
                                    </span>
                                </motion.button>

                            </div>
                        </div>    

                        {/* Rating and Reviews */}
                        <div className="flex items-center gap-2 text-lg">
                        <span className="flex items-center gap-1">
                            <span className="font-semibold">{handleRating}</span>
                            <span className="text-yellow-400">★</span>
                        </span>
                        <span className="text-gray-400">•</span>
                        <span className="text-gray-300">
                            {(singleProduct?.views / 1000).toFixed(2)}k Reviews
                        </span>
                        </div>

                        {/* Shop Owner Info */}
                        <div className="space-y-4 bg-white/5 p-4 rounded-lg">
                        <h2 className="text-xl font-semibold text-white">{singleProduct?.shopOwnerId?.fullname}</h2>
                        <div className="space-y-2">
                            <p className="flex items-center gap-2 text-gray-300">
                            <MapPin className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.location}
                            </p>
                            <p className="flex items-center gap-2 text-gray-300">
                            <Phone className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.shopOwnerId?.phone}
                            </p>
                            <p className="flex items-center gap-2 text-gray-300">
                            <MessageSquare className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.description}
                            </p>
                        </div>
                        </div>
                    
                        <motion.button
                            className="w-full bg-emerald-500 text-white rounded-md font-medium text-[22px]"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => setShowForm(!showForm)}
                        >
                        Contact Seller
                        </motion.button>

                        <div className="flex items-center justify-between mx-2 px-4 py-2 bg-white/5 ">
                        <Like className="md:order-2" />

                        <div>
                            <div className="flex items-center mt-6 mr-4 ">
                            <Ratting />
                            </div>

                            <textarea
                            name="Your Feedback"
                            id=""
                            className="w-full border border-[#10B981] rounded-md p-2 mt-4 mb-2 outline-none"
                            placeholder="Write your feedback here..."
                            >
                            </textarea>
                            <motion.button
                            type="submit"
                            className="w-full bg-emerald-500 text-white rounded-md font-medium text-[13px] my-2"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            >
                            Submit Feedback
                            </motion.button>
                        </div>
                        </div>
                    </div>
                    </div>

                    {/* Bike Details Section */}
                    <div className="mt-12 grid md:grid-cols-2 gap-8">
                    <div className="space-y-6">
                        <h2 className="text-2xl font-bold text-white">Specifications</h2>
                        <div className="grid grid-cols-2 gap-4">

                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                            <Gauge className="h-5 w-5 text-emerald-500" />
                            <div>
                            <p className="text-sm text-gray-400">Engine Type</p>
                            <p className="text-white">{singleProduct?.specifications[0]?.EngineType}</p>
                            </div>
                        </div>

                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                            <Timer className="h-5 w-5 text-emerald-500" />
                            <div>
                            <p className="text-sm text-gray-400">Displacement</p>
                            <p className="text-white">{singleProduct?.specifications[0]?.Displacement}</p>
                            </div>
                        </div>
                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                            <Power className="h-5 w-5 text-emerald-500" />
                            <div>
                            <p className="text-sm text-gray-400">Power</p>
                            <p className="text-white">{singleProduct?.specifications[0]?.Power}</p>
                            </div>
                        </div>

                        
                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                            <CheckCircle2 className="h-5 w-5 text-emerald-500" />
                            <div>
                            <p className="text-sm text-gray-400">Condition</p>
                            <p className="text-white">{singleProduct?.specifications[0]?.Condition}</p>
                            </div>
                        </div>
                        </div>
                    </div>

                    <div className="space-y-6">
                        <h2 className="text-2xl font-bold text-white">Key Features</h2>
                        <ul className="space-y-2">
                            {singleProduct?.features?.map((feature, index) => (
                                <li key={index} className="flex items-center gap-2 text-gray-300">
                                <CheckCircle2 className="h-5 w-5 text-emerald-500" />
                                {feature}
                                </li>
                            ))}
                        </ul>
                    </div>

                    <div className="grid grid-cols-2 gap-4">

                        <div className="flex items-center gap-2 ">
                        
                        <div>
                            <p className="text-gray-300">Stock Status</p>
                        </div>
                        </div>

                        <div className="flex items-center gap-2">
                        <div>
                            <p className="text-gray-300">Status</p>
                        </div>
                        </div>

                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                        <EventAvailable className="h-5 w-5 text-emerald-500" />
                        <div className="text-gray-300">{singleProduct?.stock}</div>
                        </div>

                        <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                        <Policy className="h-5 w-5 text-emerald-500" />
                        <div className="text-gray-300">{singleProduct?.status}</div>
                        </div>

                    </div>

                    
                    </div>

                    {/* Contact Form */}
                    {showForm && (
                    <motion.div 
                        className="mt-8 bg-white/5 p-6 rounded-lg"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                    >
                        <h2 className="text-2xl font-bold text-white mb-6">Contact Seller</h2>
                        <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid md:grid-cols-2 gap-4">
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Name
                            </label>
                            <input
                                type="text"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.name}
                                onChange={(e) => setFormData({...formData, name: e.target.value})}
                            />
                            </div>
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Email
                            </label>
                            <input
                                type="email"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.email}
                                onChange={(e) => setFormData({...formData, email: e.target.value})}
                            />
                            </div>
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Phone
                            </label>
                            <input
                                type="tel"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.phone}
                                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                            />
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                            Message
                            </label>
                            <textarea
                            required
                            rows={4}
                            className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                            value={formData.message}
                            onChange={(e) => setFormData({...formData, message: e.target.value})}
                            />
                        </div>
                        <motion.button
                            type="submit"
                            className="w-full py-2 bg-orange-500 text-white rounded-md font-bold text-[20px]"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                        >
                            Send Message
                        </motion.button>
                        </form>
                    </motion.div>
                    )}
                </div>
                </div>
            </div>
            
        </>
    );
}


---------------------------------------------------------------------------------
    

    
import { useEffect, useState } from 'react';
import { CompanyCard } from '../Home/Bikes/CompanyCard';
import { Button } from '../ui/button';
import { X } from 'lucide-react';
import Navbar from '../shared/Navbar';
import { toast } from 'sonner';
import { useSelector, useDispatch } from 'react-redux';
import axios from 'axios';
import { addToWishList, clearWishList, removeFromWishList } from '@/store/wishListSlice';

export default function WishlistPage() {
    const dispatch = useDispatch();
    const { wishList } = useSelector(state => state.wishlist);
    const [totalPrice, setTotalPrice] = useState(0);

    // Calculate total price
    useEffect(() => {
        const calculateTotalPrice = () => {
            const total = wishList.reduce((acc, item) => acc + item.price, 0);
            setTotalPrice(total);
        };

        calculateTotalPrice();
    }, [wishList]);

    // Fetch wishlist from server
    useEffect(() => {
        const fetchWishList = async () => {
            try {
                const response = await axios.get('http://localhost:8000/api/v1/wishlist/', {
                    withCredentials: true
                });

                console.log("Response Data:", response.data);

                if (response.data.success) {
                    // Map products and dispatch to Redux store
                    const products = response.data.wishlist.products.map(product => ({
                        _id: product._id,
                        title: product.title,
                        price: product.price,
                        images: product.images,
                        description: product.description, // ✅ Include description
                    }));

                    dispatch(addToWishList(products));
                }
            } catch (error) {
                console.error('Error fetching wishlist:', error);
            }
        };

        fetchWishList();
    }, [dispatch]);

    // Remove a single product from the wishlist
    const handleRemove = async (productId) => {
        try {
            const res = await axios.delete(`http://localhost:8000/api/v1/wishlist/remove/${productId}`, {
                withCredentials: true
            });

            if (res.data.success) {
                dispatch(removeFromWishList(productId));
                toast.success(res.data.message, {
                    style: {
                        color: '#10B981',
                        backgroundColor: '#09090B',
                        fontSize: '20px',
                        borderColor: '#10B981',
                        padding: '10px 20px'
                    }
                });
            }
        } catch (error) {
            console.error("Remove failed:", error);
            toast.error("Failed to remove item", {
                style: {
                    color: '#ef4444',
                    backgroundColor: '#09090B',
                    fontSize: '20px',
                    borderColor: '#ef4444',
                    padding: '10px 20px'
                }
            });
        }
    };

    // Clear the entire wishlist
    const handleClearWishlist = async () => {
        try {
            const res = await axios.delete('http://localhost:8000/api/v1/wishlist/clear', {
                withCredentials: true
            });

            if (res.data.success) {
                dispatch(clearWishList());
                toast.success("Wishlist cleared!", {
                    style: {
                        color: '#10B981',
                        backgroundColor: '#09090B',
                        fontSize: '20px',
                        borderColor: '#10B981',
                        padding: '10px 20px'
                    }
                });
            }
        } catch (error) {
            console.error('Clear failed:', error);
            toast.error("Failed to clear wishlist", {
                style: {
                    color: '#ef4444',
                    backgroundColor: '#09090B',
                    fontSize: '20px',
                    borderColor: '#ef4444',
                    padding: '10px 20px'
                }
            });
        }
    };

    return (
        <>
            <Navbar />
            <div className="min-h-screen py-12 bg-[#09090B]">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    {/* Header */}
                    <div className="flex justify-between items-center mb-8">
                        <h1 className="text-3xl font-bold text-emerald-500">Your Wishlist</h1>
                        <Button 
                            onClick={handleClearWishlist}
                            variant="destructive"
                            className="hover:bg-rose-600"
                        >
                            Clear Wishlist
                        </Button>
                    </div>

                    {/* Total Price */}
                    {wishList.length > 0 && (
                        <div className="mb-8 text-xl text-gray-300">
                            Total Price: <span className="text-emerald-500 font-bold">₹{totalPrice.toLocaleString()}</span>
                        </div>
                    )}

                    {/* Wishlist Items */}
                    {wishList.map(item => (
                            <div key={item._id} className="relative bg-black/20 p-6 rounded-lg border border-emerald-500/30">
                                <CompanyCard 
                                    id={item._id}
                                    name={item.title}
                                    price={item.price ?? undefined} // ✅ Pass undefined if missing
                                    images={item.images ?? []} // ✅ Pass empty array if undefined
                                    description={item.description}
                                />
                                <Button
                                    onClick={() => handleRemove(item._id)}
                                    className="w-8 h-8 absolute top-7 left-64 bg-rose-500/10 rounded-full text-rose-500 hover:bg-rose-500/30"
                                    size=""
                                >
                                    <X className="h-4 w-4" />
                                </Button>
                            </div>
                        ))}


                </div>
            </div>
        </>
    );
}





















<div className="min-h-screen py-12 bg-[#09090B]">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    
                    {/* ✅ Header */}
                    <div className="flex justify-between items-center mb-8">
                        <h1 className="text-3xl font-bold text-emerald-500">Your Wishlist</h1>
                        <Button 
                            onClick={handleClearWishlist}
                            variant="destructive"
                            className="hover:bg-rose-600"
                        >
                            Clear Wishlist
                        </Button>
                    </div>

                    {/* ✅ Total Price */}
                    {
                        wishlist.length > 0 && (
                            <div className="mb-8 text-xl text-gray-300">
                                Total Price: <span className="text-emerald-500 font-bold">₹{totalPrice.toLocaleString()}</span>
                            </div>
                        )
                    }

                    {/* ✅ Wishlist Items */}
                    {
                        wishlist.length > 0 ? (
                                wishlist.map(item => (
                                    <div key={item._id} className="relative bg-black/20 p-6 rounded-lg border border-emerald-500/30 mb-4">
                                        <CompanyCard 
                                             key={item._id} // ✅ Fix: Match _id with product object
                                            id={item._id} // ✅ Fix: Match _id with product object
                                            name={item.title}
                                            price={item.price}
                                            images={item.images || []}
                                            description={item.description}
                                        />
                                        <Button
                                            onClick={() => handleRemove(item._id)} // ✅ Fix: Use _id
                                            className="w-8 h-8 absolute top-7 left-64 bg-rose-500/10 rounded-full text-rose-500 hover:bg-rose-500/30"
                                        >
                                            <X className="h-4 w-4" />
                                        </Button>
                                     </div>
                                ))
                            ) : (
                                <p className="text-gray-400">No items in wishlist</p>
                            )
                    }

                </div>
            </div>


            import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom'; // Ensure useParams is imported from react-router-dom
import { motion } from 'framer-motion';
import { sampleCompanies } from '../../../JavaScript/bike';
import { ImageSlider } from './ImageSlider';
import { 
  Phone, 
  MapPin, 
  MessageSquare, 
  Timer, 
  Power, 
  CheckCircle2,
  Share2,
  Heart,
  Gauge,
} from 'lucide-react';
import Navbar from '@/components/shared/Navbar';
import { toast } from 'sonner';
import Like from '../../user/my-ui/Like';
import Ratting from '../../user/my-ui/Ratting';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import { clearSingleProduct, setLoading, setSingleProduct } from '@/store/productSlice';
import { Product_API_END_POINT } from '@/utils/api';
import { EventAvailable, Policy } from '@mui/icons-material';
import { addToWishList, removeFromWishList } from '@/store/wishListSlice';
import useFetchRatting from '@/hooks/useFetchRatting';

export default function BikeDetails() {
  
  const dispatch = useDispatch();
  const params = useParams();
  const productId = params.id;
//   console.log("Product ID:", productId);

  const { singleProduct , loading } = useSelector(state => state.product);
//   const { wishlist } = useSelector(state => state.wishlist);
//   console.log("Wishlist:", wishlist);
  



  useEffect(() => {

		const fetchSingleBike = async () => {

			try {

                dispatch(setLoading(true));
				dispatch(clearSingleProduct());

				const response = await axios.get(`http://localhost:8000/api/v1/product/${productId}`, {
					withCredentials: true
				});

				// console.log("Response Data:", response.data);

				if(response.data.success) {
					dispatch(setSingleProduct(response.data.product));
				}

			}catch (error) {
				console.error('Failed to fetch bike details:', error);
				toast.error("Failed to fetch bike details!", {
					style: {
						color: '#10B981',
						backgroundColor: '#09090B',
						fontSize: '20px',
						borderColor: '#10B981',
						padding: '10px 20px'
					}
				});
			} finally {
                 dispatch(setLoading(false));
            }
		};

		fetchSingleBike();

    }, [productId, dispatch]);

//   console.log("Single Product:", singleProduct);
//   console.log("Single Product title :", singleProduct?.title);

//   console.log("Single info ID:", singleProduct?.specifications[0]?.EngineType);

  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: ''
  });


const { wishList } = useSelector(state => state.wishlist);
const [isFavorite, setIsFavorite] = useState(false);

useEffect(() => {
    if (singleProduct) {
        const exists = wishList.some(item => item._id === singleProduct._id);
        setIsFavorite(exists);
    }
}, [wishList, singleProduct]);



const [likes, setLikes] = useState(0);
  const [dislikes, setDislikes] = useState(0);





  const handleSubmit = (e) => {
    e.preventDefault();
    toast.success("FormSubmission Successfully!❤️❤️ ", {
      style: {
        color: '#10B981',
        backgroundColor: '#09090B',          
        fontSize: '20px',
        borderColor: '#10B981',
        padding: '10px 20px'
      }
    });
    setShowForm(false);
  };

  const handleRating = (rating) => {
    setUserRating(rating);
    toast.success(`Thank you for rating ${rating} stars!`, {
      style: {
        color: '#10B981',
        backgroundColor: '#09090B',
        fontSize: '20px',
        borderColor: '#10B981',
        padding: '10px 20px'
      }
    });
  };

  const handleLikeDislike = (type) => { 
    if (type === 'like' && dislikes === 0) {
      setDislikes(prev => prev - 1);
    } else if (type === 'dislike' && likes === 0) {
      setLikes(prev => prev - 1);
    } else {
      if (type === 'like') {
        setLikes(prev => prev + 1);
      } else {
        setDislikes(prev => prev + 1);
      }
    }
  };



  return (

        <>  

            <Navbar />
            
            <div className="min-h-screen py-12 bg-[#09090B]">
                
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                    <h1 className="text-4xl font-bold text-[#246FAC] mb-10 text-start" style={{ textDecoration: "underline solid #FFB903 0.1em" }}>Bike Details Page :-</h1>
                <div className="bg-black/20 backdrop-blur-sm border border-emerald-500/30 rounded-lg shadow-2xl p-6 md:p-8">
                    {/* Main Info Section */}

                    <div className="grid md:grid-cols-2 gap-8">
                    {/* Left Column - Images */}

                    <div className="h-[730px] rounded-lg overflow-hidden">
                        {/* <ImageSlider images={singleProduct?.images || []} interval={5000} className="h-full" /> */}
                        <ImageSlider images={op} interval={5000} className="h-full" />

                    </div>

                    {/* Right Column - Basic Info */}
                    <div className="space-y-6">
                        <div className="flex justify-center items-start">
                            <h1 className="text-4xl font-bold text-white">{singleProduct?.title}</h1> 
                        </div>

                        <div className="flex justify-between items-start">
                            <h5 className="text-3xl font-bold text-emerald-500">
                                Rs {singleProduct?.price?.toLocaleString()}
                            </h5>

                            <div className="flex gap-2 items-center">
                                <motion.button
                                onClick={handleShare}
                                className="flex items-center gap-2 px-4 py-2 rounded-lg bg-emerald-500/10 hover:bg-emerald-500/20 transition-colors border border-emerald-500/30"
                                whileHover={{ scale: 1.02 }}
                                whileTap={{ scale: 0.98 }}
                                >
                                <Share2 className="h-5 w-5 text-emerald-500" />
                                <span className="text-emerald-500 font-medium">Share</span>
                                </motion.button>
                                
                                <motion.button
                                    onClick={handleWishlist}
                                    className="flex items-center gap-2 px-4 py-2 rounded-lg bg-rose-500/10 hover:bg-rose-500/20 transition-colors border border-rose-500/30"
                                >
                                    <Heart 
                                        className={`h-5 w-5 ${isFavorite ? 'text-rose-500 fill-rose-500' : 'text-rose-500'}`}
                                    />

                                    <span className="text-rose-500 font-medium">
                                        {isFavorite ? 'Remove from Wishlist' : 'Add to Wishlist'}
                                    </span>
                                </motion.button>

                            </div>
                        </div>    

                        {/* Rating and Reviews */}
                        <div className="flex items-center gap-2 text-lg">
                        <span className="flex items-center gap-1">
                            <span className="font-semibold">{handleRating}</span>
                            <span className="text-yellow-400">★</span>
                        </span>
                        <span className="text-gray-400">•</span>
                        <span className="text-gray-300">
                            {(singleProduct?.views / 1000).toFixed(2)}k Reviews
                        </span>
                        </div>

                        {/* Shop Owner Info */}
                        <div className="space-y-4 bg-white/5 p-4 rounded-lg">
                        <h2 className="text-xl font-semibold text-white">{singleProduct?.shopOwnerId?.fullname}</h2>
                        <div className="space-y-2">
                            <p className="flex items-center gap-2 text-gray-300">
                            <MapPin className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.location}
                            </p>
                            <p className="flex items-center gap-2 text-gray-300">
                            <Phone className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.shopOwnerId?.phone}
                            </p>
                            <p className="flex items-center gap-2 text-gray-300">
                            <MessageSquare className="h-5 w-5 text-emerald-500" />
                            {singleProduct?.description}
                            </p>
                        </div>
                        </div>
                    
                        <motion.button
                            className="w-full bg-emerald-500 text-white rounded-md font-medium text-[22px]"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            onClick={() => setShowForm(!showForm)}
                        >
                        Contact Seller
                        </motion.button>

                        <div className="flex items-center justify-between mx-2 px-4 py-2 bg-white/5 ">
                        <Like className="md:order-2" />

                        <div>
                            <div className="flex items-center mt-6 mr-4 ">
                            <Ratting />
                            </div>

                            <textarea
                            name="Your Feedback"
                            id=""
                            className="w-full border border-[#10B981] rounded-md p-2 mt-4 mb-2 outline-none"
                            placeholder="Write your feedback here..."
                            >
                            </textarea>
                            <motion.button
                            type="submit"
                            className="w-full bg-emerald-500 text-white rounded-md font-medium text-[13px] my-2"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                            >
                            Submit Feedback
                            </motion.button>
                        </div>
                        </div>
                    </div>
                 

                   
                        

                        
                       
                       
                    </div>

                    

                    

                    
                    </div>

                    {/* Contact Form */}
                    {showForm && (
                    <motion.div 
                        className="mt-8 bg-white/5 p-6 rounded-lg"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                    >
                        <h2 className="text-2xl font-bold text-white mb-6">Contact Seller</h2>
                        <form onSubmit={handleSubmit} className="space-y-4">
                        <div className="grid md:grid-cols-2 gap-4">
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Name
                            </label>
                            <input
                                type="text"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.name}
                                onChange={(e) => setFormData({...formData, name: e.target.value})}
                            />
                            </div>
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Email
                            </label>
                            <input
                                type="email"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.email}
                                onChange={(e) => setFormData({...formData, email: e.target.value})}
                            />
                            </div>
                            <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                                Phone
                            </label>
                            <input
                                type="tel"
                                required
                                className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                                value={formData.phone}
                                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                            />
                            </div>
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-300 mb-1">
                            Message
                            </label>
                            <textarea
                            required
                            rows={4}
                            className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                            value={formData.message}
                            onChange={(e) => setFormData({...formData, message: e.target.value})}
                            />
                        </div>
                        <motion.button
                            type="submit"
                            className="w-full py-2 bg-orange-500 text-white rounded-md font-bold text-[20px]"
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                        >
                            Send Message
                        </motion.button>
                        </form>
                    </motion.div>
                    )}
                </div>
                </div>
            </div>
            
        </>
    );
}
