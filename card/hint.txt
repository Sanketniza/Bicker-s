Edited client/src/lib/company-data.js


// Sample company data - replace with actual data source
// Sample company data with extended information
export const sampleCompanies = [
  {
    id: '1',
-1
+20
      'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg',
      'https://cdn.pixabay.com/photo/2015/07/04/19/56/motorcycle-832084_1280.jpg'
    ],
    price: 15999
    price: 15999,
    shopOwner: {
      name: "Mike's Premium Motorcycles",
      address: "123 Bike Street, Motor City, MC 12345",
      phone: "+1 (555) 123-4567",
      whatsapp: "+1 (555) 123-4567"
    },
    bikeDetails: {
      condition: "New",
      type: "Sport Bike",
      engineType: "Petrol",
      displacement: "998 cc",
      power: "203 HP",
      features: [
        "Öhlins Electronic Racing Suspension",
        "Brembo Stylema® Brake Calipers",
        "6-Axis IMU",
        "Quick Shifter"
      ]
    }
  },
  {
    id: '2',
-1
+20
      'https://cdn.pixabay.com/photo/2015/07/04/19/56/motorcycle-832084_1280.jpg',
      'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg'
    ],
    price: 23995
    price: 23995,
    shopOwner: {
      name: "Italian Motorcycle Specialists",
      address: "456 Racing Road, Speed City, SC 67890",
      phone: "+1 (555) 234-5678",
      whatsapp: "+1 (555) 234-5678"
    },
    bikeDetails: {
      condition: "New",
      type: "Super Sport",
      engineType: "Petrol",
      displacement: "1103 cc",
      power: "214 HP",
      features: [
        "Desmosedici Stradale Engine",
        "Winglets",
        "Öhlins Smart EC 2.0",
        "TFT Display"
      ]
    }
  },
  {
    id: '3',
-1
+21
      'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg',
      'https://cdn.pixabay.com/photo/2016/03/27/17/59/vintage-1283299_1280.jpg'
    ],
    price: 17995
    price: 17995,
    shopOwner: {
      name: "German Engineering Motors",
      address: "789 Precision Lane, Tech City, TC 34567",
      phone: "+1 (555) 345-6789",
      whatsapp: "+1 (555) 345-6789"
    },
    bikeDetails: {
      condition: "Used",
      mileage: "5,000 km",
      type: "Sport Bike",
      engineType: "Petrol",
      displacement: "999 cc",
      power: "205 HP",
      features: [
        "M Package",
        "Dynamic Traction Control",
        "Gear Shift Assistant Pro",
        "Dynamic Damping Control"
      ]
    }
  },
  {
    id: '4',
-1
+20
      'https://cdn.pixabay.com/photo/2015/07/04/19/56/motorcycle-832084_1280.jpg',
      'https://cdn.pixabay.com/photo/2016/04/07/06/53/bmw-1313343_1280.jpg'
    ],
    price: 19999
    price: 19999,
    shopOwner: {
      name: "Japanese Motorcycle Experts",
      address: "321 Import Drive, Rising Sun City, RS 89012",
      phone: "+1 (555) 456-7890",
      whatsapp: "+1 (555) 456-7890"
    },
    bikeDetails: {
      condition: "New",
      type: "Super Sport",
      engineType: "Petrol",
      displacement: "1000 cc",
      power: "217 HP",
      features: [
        "Grand Prix-inspired aerodynamics",
        "Öhlins Smart EC",
        "Brembo Stylema® calipers",
        "6-axis IMU"
      ]
    }
  }
];


-----------------------------------------------------------------------

Created client/src/pages/bike-details.jsx

import { useState } from 'react';
import { useLocation } from 'wouter';
import { motion } from 'framer-motion';
import { sampleCompanies } from '@/lib/company-data';
import { ImageSlider } from '@/components/company-cards/ImageSlider';
import { 
  Phone, 
  MapPin, 
  WhatsappLogo, 
  Engine, 
  Gauge, 
  Power, 
  CheckCircle2 
} from 'lucide-react';

export default function BikeDetails() {
  const [location] = useLocation();
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    message: ''
  });

  // Get bike ID from URL
  const bikeId = location.split('/')[2];
  const bike = sampleCompanies.find(b => b.id === bikeId);

  if (!bike) {
    return <div className="min-h-screen flex items-center justify-center">
      <h1 className="text-2xl text-white">Bike not found</h1>
    </div>;
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you would typically send the form data to your backend
    console.log('Form submitted:', formData);
    alert('Thanks for your interest! The shop owner will contact you soon.');
    setShowForm(false);
  };

  return (
    <div className="min-h-screen py-12 bg-[#09090B]">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-black/20 backdrop-blur-sm border border-emerald-500/30 rounded-lg shadow-2xl p-6 md:p-8">
          
          {/* Main Info Section */}
          <div className="grid md:grid-cols-2 gap-8">
            {/* Left Column - Images */}
            <div className="h-[400px] rounded-lg overflow-hidden">
              <ImageSlider images={bike.images} interval={5000} />
            </div>

            {/* Right Column - Basic Info */}
            <div className="space-y-6">
              <h1 className="text-4xl font-bold text-white">{bike.name}</h1>
              <p className="text-3xl font-bold text-emerald-500">
                ${bike.price.toLocaleString()}
              </p>
              
              {/* Shop Owner Info */}
              <div className="space-y-4 bg-white/5 p-4 rounded-lg">
                <h2 className="text-xl font-semibold text-white">{bike.shopOwner.name}</h2>
                <div className="space-y-2">
                  <p className="flex items-center gap-2 text-gray-300">
                    <MapPin className="h-5 w-5 text-emerald-500" />
                    {bike.shopOwner.address}
                  </p>
                  <p className="flex items-center gap-2 text-gray-300">
                    <Phone className="h-5 w-5 text-emerald-500" />
                    {bike.shopOwner.phone}
                  </p>
                  <p className="flex items-center gap-2 text-gray-300">
                    <WhatsappLogo className="h-5 w-5 text-emerald-500" />
                    {bike.shopOwner.whatsapp}
                  </p>
                </div>
              </div>

              <motion.button
                className="w-full py-3 bg-emerald-500 text-white rounded-md font-medium"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setShowForm(!showForm)}
              >
                Contact Seller
              </motion.button>
            </div>
          </div>

          {/* Bike Details Section */}
          <div className="mt-12 grid md:grid-cols-2 gap-8">
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-white">Specifications</h2>
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                  <Engine className="h-5 w-5 text-emerald-500" />
                  <div>
                    <p className="text-sm text-gray-400">Engine Type</p>
                    <p className="text-white">{bike.bikeDetails.engineType}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                  <Gauge className="h-5 w-5 text-emerald-500" />
                  <div>
                    <p className="text-sm text-gray-400">Displacement</p>
                    <p className="text-white">{bike.bikeDetails.displacement}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                  <Power className="h-5 w-5 text-emerald-500" />
                  <div>
                    <p className="text-sm text-gray-400">Power</p>
                    <p className="text-white">{bike.bikeDetails.power}</p>
                  </div>
                </div>
                <div className="flex items-center gap-2 bg-white/5 p-3 rounded-lg">
                  <CheckCircle2 className="h-5 w-5 text-emerald-500" />
                  <div>
                    <p className="text-sm text-gray-400">Condition</p>
                    <p className="text-white">{bike.bikeDetails.condition}</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-white">Key Features</h2>
              <ul className="space-y-2">
                {bike.bikeDetails.features.map((feature, index) => (
                  <li key={index} className="flex items-center gap-2 text-gray-300">
                    <CheckCircle2 className="h-5 w-5 text-emerald-500" />
                    {feature}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Contact Form */}
          {showForm && (
            <motion.div 
              className="mt-8 bg-white/5 p-6 rounded-lg"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
            >
              <h2 className="text-2xl font-bold text-white mb-6">Contact Seller</h2>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-1">
                      Name
                    </label>
                    <input
                      type="text"
                      required
                      className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                      value={formData.name}
                      onChange={(e) => setFormData({...formData, name: e.target.value})}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-1">
                      Email
                    </label>
                    <input
                      type="email"
                      required
                      className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                      value={formData.email}
                      onChange={(e) => setFormData({...formData, email: e.target.value})}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-1">
                      Phone
                    </label>
                    <input
                      type="tel"
                      required
                      className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                      value={formData.phone}
                      onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-1">
                    Message
                  </label>
                  <textarea
                    required
                    rows={4}
                    className="w-full bg-white/10 border border-gray-600 rounded-md px-4 py-2 text-white"
                    value={formData.message}
                    onChange={(e) => setFormData({...formData, message: e.target.value})}
                  />
                </div>
                <motion.button
                  type="submit"
                  className="w-full py-3 bg-emerald-500 text-white rounded-md font-medium"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  Send Message
                </motion.button>
              </form>
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
}


----------------------------------------------------------------

Edited client/src/components/company-cards/CompanyCard.jsx

import { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';
import { useState } from 'react';
import { useLocation } from 'wouter';
import { ImageSlider } from './ImageSlider';
export function CompanyCard({ name, images, price }) {
export function CompanyCard({ id, name, images, price }) {
  const [isHovered, setIsHovered] = useState(false);
  const [, setLocation] = useLocation();
  // Motion values for 3D rotation
  const x = useMotionValue(0);
-0
+4
    x.set(0);
    y.set(0);
  }
  const handleViewDetails = () => {
    setLocation(`/bike/${id}`);
  };
  return (
    <motion.div
-0
+1
              stiffness: 500,
              damping: 30
            }}
            onClick={handleViewDetails}
          >
            View Details
          </motion.button>

          ----------------------------------------------------------------

          Edited client/src/components/company-cards/CompanyCardGrid.jsx

                      key={company.id}
            id={company.id}
            name={company.name}

            -------------------------

            Edited client/src/App.jsx

            import CompaniesPage from "@/pages/companies";
import BikeDetails from "@/pages/bike-details";
function Router() {
  return (
    <Switch>
      {/* Add pages below */}
      <Route path="/" component={CompaniesPage}/>
      <Route path="/bike/:id" component={BikeDetails}/>
      {/* Fallback to 404 */}

      ----------------------------------------------------------------

      npm i lucide-react

----------------------------------------------------------------

Edited client/src/pages/bike-details.jsx

            {/* Left Column - Images */}
            <div className="h-[400px] rounded-lg overflow-hidden">
            <div className="h-[600px] rounded-lg overflow-hidden">
              <ImageSlider images={bike.images} interval={5000} />

              ------------------------------------------------

              Edited client/src/components/company-cards/ImageSlider.jsx

               }, [images.length, interval]);
  return (
    <div className="relative w-full h-40 overflow-hidden rounded-t-lg">
    <div className="relative w-full h-full overflow-hidden">
      <AnimatePresence initial={false} mode="wait">
        <motion.img
          key={currentIndex}
          src={images[currentIndex]}
          alt={`Slide ${currentIndex + 1}`}
          className="absolute w-full h-full object-cover"
          className="absolute w-full h-full object-contain bg-black/40"
          initial={{ opacity: 0, x: 300 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -300 }}
          transition={{ duration: 0.5 }}
        />
      </AnimatePresence>
      
      <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-1">
      <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex gap-2">
        {images.map((_, index) => (
          <div
            key={index}
            className={`w-1.5 h-1.5 rounded-full ${
              currentIndex === index ? 'bg-white' : 'bg-white/50'
            className={`w-2 h-2 rounded-full transition-all duration-300 ${
              currentIndex === index ? 'bg-white scale-125' : 'bg-white/50'
            }`}
          />
        ))}


----------------------------------------------------------------

Edited client/src/pages/bike-details.jsx

            <div className="h-[600px] rounded-lg overflow-hidden">
              <ImageSlider images={bike.images} interval={5000} />
              <ImageSlider images={bike.images} interval={5000} className="h-full" />
            </div>